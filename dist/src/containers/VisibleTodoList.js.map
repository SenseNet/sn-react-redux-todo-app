{"version":3,"sources":["../../src/containers/VisibleTodoList.tsx"],"names":[],"mappings":"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","file":"VisibleTodoList.js","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router'\r\nimport { ODataApi } from 'sn-client-js'\r\nimport { Actions } from 'sn-redux'\r\nimport { getVisibleTodos, getErrorMessage, getIsFetching } from '../reducers/filtering'\r\nimport { TodoList } from '../components/TodoList'\r\nimport { FetchError } from '../components/FetchError'\r\n\r\n\r\nexport interface VisibleTodoListProps {\r\n  onTodoClick: Function,\r\n  onDeleteClick: Function,\r\n  collection: any,\r\n  path: string,\r\n  options: ODataApi.ODataParams,\r\n  filter: string,\r\n  fetchTodos: Function,\r\n  requestTodos: Function,\r\n  isFetching: false,\r\n  errorMessage: any\r\n}\r\n\r\nclass VisibleTodoList extends React.Component<VisibleTodoListProps, {}>{\r\n  componentDidMount() {\r\n    this.fetchData(this.props.filter);\r\n  }\r\n  componentDidUpdate(prevOps) {\r\n    if (this.props.filter !== prevOps.filter) {\r\n      this.fetchData(this.props.filter);\r\n    }\r\n  }\r\n\r\n  fetchData(filter) {\r\n    const { path, options, fetchTodos } = this.props;\r\n    let optionObj = new ODataApi.ODataParams({\r\n      select: ['DisplayName', 'Status']\r\n    });\r\n    if (filter === 'Active') {\r\n      optionObj['filter'] = `isOf('Task') and Status eq %27Active%27`;\r\n    }\r\n    else if (filter === 'Completed') {\r\n      optionObj['filter'] = `isOf('Task') and Status eq %27Completed%27`;\r\n    }\r\n    else {\r\n      optionObj['filter'] = \"isOf('Task')\";\r\n    }\r\n    fetchTodos(path, optionObj);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isFetching && !this.props.collection.length) {\r\n      return <p>Loading...</p>\r\n    }\r\n    if (this.props.errorMessage && !this.props.collection.length) {\r\n      return (\r\n        <FetchError\r\n          message={this.props.errorMessage}\r\n          onRetry={() => this.fetchData(this.props.filter)}\r\n          />\r\n      )\r\n    }\r\n    return <TodoList collection={this.props.collection} onTodoClick={this.props.onTodoClick} onDeleteClick={this.props.onDeleteClick} />\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, { params }) => {\r\n  const filter = params.filter || 'All';\r\n  const url = '/workspaces/Project/budapestprojectworkspace/Tasks';\r\n  return {\r\n    collection: getVisibleTodos(state, filter),\r\n    errorMessage: getErrorMessage(state, filter),\r\n    isFetching: getIsFetching(state, filter),\r\n    filter,\r\n    options: params.options,\r\n    path: params.path || url,\r\n  }\r\n}\r\n\r\nconst toggleTodoAction = Actions.UpdateContent;\r\nconst deleteTodoAction = Actions.Delete;\r\nconst fetchTodosAction = Actions.RequestContent;\r\n\r\nconst VisibleTodoLista = withRouter(connect(\r\n  mapStateToProps,\r\n  {\r\n    onTodoClick: toggleTodoAction,\r\n    onDeleteClick: deleteTodoAction,\r\n    fetchTodos: fetchTodosAction\r\n  }\r\n)(VisibleTodoList));\r\n\r\nexport default VisibleTodoLista"]}