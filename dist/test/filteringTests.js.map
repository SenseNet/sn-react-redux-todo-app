{"version":3,"sources":["../../test/filteringTests.ts"],"names":[],"mappings":"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","file":"filteringTests.js","sourcesContent":["//<reference path=\"../../node_modules/@types/mocha/index.d.ts\"/>\r\nimport { combineReducers, createStore } from 'redux';\r\nimport { Reducers, Actions } from 'sn-redux';\r\nimport { createList, listByFilter, getVisibleTodos, getIsFetching, getErrorMessage } from '../src/reducers/filtering'\r\nimport * as Chai from 'chai';\r\nconst expect = Chai.expect;\r\n\r\ndescribe('#filtering', () => {\r\n    let state: any;\r\n    let collection, myReducer, store;\r\n    beforeEach(() => {\r\n        state = {\r\n            collection: {\r\n                byId: {\r\n                    5145: {\r\n                        DisplayName: \"Duis commodo nunc\",\r\n                        Id: 5145,\r\n                        Status: [\"active\"],\r\n                        Type: \"Task\"\r\n                    },\r\n                    5146: {\r\n                        DisplayName: \"Maecenas nec pulvinar\",\r\n                        Id: 5146,\r\n                        Status: [\"active\"],\r\n                        Type: \"Task\"\r\n                    },\r\n                    5147: {\r\n                        DisplayName: \"Nulla pharetra\",\r\n                        Id: 5147,\r\n                        Status: [\"active\"],\r\n                        Type: \"Task\"\r\n                    }\r\n                },\r\n                errorMessage: null,\r\n                ids: [5145, 5146, 5147],\r\n                isFetching: false\r\n            },\r\n            listByFilter: {\r\n                Active: {\r\n                    ids: [5145, 5146, 5147],\r\n                    errorMessage: null,\r\n                    isFetching: false\r\n                },\r\n                All: {\r\n                    ids: [5145, 5146, 5147],\r\n                    errorMessage: null,\r\n                    isFetching: false\r\n                },\r\n                Completed: {\r\n                    ids: [],\r\n                    errorMessage: null,\r\n                    isFetching: false\r\n                }\r\n            }\r\n        }\r\n        collection = Reducers.collection;\r\n        myReducer = combineReducers({\r\n            collection,\r\n            listByFilter\r\n        });\r\n        store = createStore(\r\n            myReducer,\r\n            state\r\n        );\r\n    })\r\n\r\n    describe('#byId reducer with filtering', () => {\r\n        it('should return the initial state', () => {\r\n            expect(Reducers.byId(undefined, {})).to.be.deep.equal({});\r\n        });\r\n        it('should handle DELETE_CONTENT_SUCCESS', () => {\r\n            const ids = [1, 2, 3];\r\n            expect(Reducers.byId(ids, { type: 'DELETE_CONTENT_SUCCESS', id: 1 })).to.be.deep.equal({ 0: 1, 2: 3 });\r\n        });\r\n        it('should return a new state with the given response', () => {\r\n            expect(Reducers.byId({}, { response: { entities: { collection: { a: 0, b: 2 } } } }))\r\n                .to.be.deep.eq({ a: 0, b: 2 });\r\n        });\r\n    });\r\n\r\n    describe('#getVisibleTodos', () => {\r\n        const task = {\r\n            DisplayName: \"Duis commodo nunc\",\r\n            Id: 5145,\r\n            Status: [\"active\"],\r\n            Type: \"Task\"\r\n        }\r\n        it('should return the states first item by all filter', () => {\r\n            expect(getVisibleTodos(state, 'All')[0]).to.be.deep.equal(task)\r\n        });\r\n        it('should return the states first item by active filter', () => {\r\n            expect(getVisibleTodos(state, 'Active')[0]).to.be.deep.equal(task)\r\n        });\r\n        it('should return an empty array with completed filter', () => {\r\n            expect(getVisibleTodos(state, 'Completed')).to.be.deep.equal([])\r\n        });\r\n    });\r\n    describe('#getIsFetching reducer', () => {\r\n        it('should return the initial state', () => {\r\n            expect(getIsFetching(state, 'All')).to.be.eq(false);\r\n        });\r\n    });\r\n    describe('#getErrorMessage reducer', () => {\r\n        it('should return the initial state', () => {\r\n            expect(getErrorMessage(state, 'All')).to.be.eq(null);\r\n        });\r\n    });\r\n    describe('#errorMessage', () => {\r\n        it('should return the given errorMessage', () => {\r\n            store.dispatch(Actions.ReceiveContentFailure('All', { message: 'error happened' }));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['All'].errorMessage).to.be.eq('error happened');\r\n        });\r\n        it('should return null', () => {\r\n            store.dispatch(Actions.RequestContent('/workspaces', {}));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['All'].errorMessage).to.be.eq(null);\r\n        });\r\n        it('should return null', () => {\r\n            store.dispatch(Actions.ReceiveContent({ d: { results: [] } }, 'All'));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['All'].errorMessage).to.be.eq(null);\r\n        });\r\n    });\r\n    describe('#ids', () => {\r\n        it('should return increment the length of the ids array', () => {\r\n            store.dispatch(Actions.CreateContentSuccess({ response: { d: { Id: 1234 } } }));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['All']['ids'].length).to.be.deep.equal(4);\r\n        });\r\n        it('should return the changed array', () => {\r\n            store.dispatch(Actions.UpdateContentSuccess({ response: { d: { Id: 5145, Status: [\"completed\"] } } }));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['Completed']['ids']).to.be.deep.equal([]);\r\n        });\r\n        it('should return the changed array', () => {\r\n            store.dispatch(Actions.DeleteSuccess(1, 5146));\r\n            let s = store.getState();\r\n            expect(s[\"listByFilter\"]['All']['ids'].length).to.be.deep.equal(2);\r\n        });\r\n    });\r\n})"]}